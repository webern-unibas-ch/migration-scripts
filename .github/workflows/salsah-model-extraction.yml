name: Salsah Model Extraction

on:
  workflow_dispatch: # trigger manually

# globals
env:
  SCRIPT_DIR: 1_salsah-model-extraction
  ARCHIVE_DIR: archive


jobs:
  extract_salsah_model:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
    
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'
      - run: java -version
      
      - name: Install PlantUML
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: wget -O plantuml.jar https://sourceforge.net/projects/plantuml/files/plantuml.jar
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install DSP-tools
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: pip install dsp-tools==1.4.0

      - name: Check for existing JSON file
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: |
          count=$(ls -1 *.json 2>/dev/null | wc -l)         
          if [ $count -ge 1 ]; then
            echo "### Need to archive $count old file(s)..."
            if [ ! -d $ARCHIVE_DIR/ ]; then
              echo "Creating $ARCHIVE_DIR/ folder"
              mkdir -p $ARCHIVE_DIR/
            fi
            for file in *.json; do 
              echo "Moving $file into $ARCHIVE_DIR/"
              mv "$file" $ARCHIVE_DIR/
            done
          fi

      - name: Run extraction script
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: python SalsahModelToJson.py

      - name: Validate extracted model via DSP-TOOLS
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: dsp-tools create webern_*.json --validate

      - name: Remove gaga file
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: |
          if [ ! -f gaga.json ]; then
            echo "No gaga file to remove."
          else
            echo "Removing gaga file."
            rm gaga.json
          fi
      
      - name: Run script to create visualization template
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: python VisualizeJson.py
      
      - name: Create PlantUML SVG
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: java -jar plantuml.jar -v -tsvg webern_*_plantuml.txt
      
      - name: Remove PlantUML .jar file
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: |
          if [ ! -f plantuml.jar ]; then
            echo "No jar file to remove."
          else
            echo "Removing jar file."
            rm plantuml.jar
          fi
      
      - name: Remove temporary .txt file
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: |
          if [ ! -f webern_*_plantuml.txt ]; then
            echo "No txt file to remove."
          else
            echo "Removing txt file."
            rm webern_*_plantuml.txt
          fi
      
      - name: Validate
        working-directory: ${{ github.workspace }}/${{ env.SCRIPT_DIR }}
        run: ls -R

      - name: Check git status before commit
        run: |
          git config --get remote.origin.url
          git status
          
      - name: Configure git
        run: |
          echo "Configuring git"
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
    
      - name: Commit files
        run: |
          echo "Running git commit"
          git add .
          git commit -m "Auto-commit of SALSAH model extraction from ${{ github.repository }}@${{ github.sha }}"

      - name: Push changes
        run: git push origin HEAD:main
    
      - name: Congratulations
        if: success()
        run: echo "ðŸŽ‰ New SALSAH model extraction completed ðŸŽŠ"
